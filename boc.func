{-
    This file is part of stdlib.func.
    It is derived from code originally part of the TON Blockchain project.

    stdlib.func is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stdlib.func is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with stdlib.func (see the file LICENSE.LGPL). If not, see
    <https://www.gnu.org/licenses/>. You should also have received a copy of
    the GNU General Public License (see the file LICENSE.GPL), which is
    referenced by the LGPL.
-}


;; ██████╗ ██╗   ██╗██╗██╗     ██████╗
;; ██╔══██╗██║   ██║██║██║     ██╔══██╗
;; ██████╔╝██║   ██║██║██║     ██║  ██║
;; ██╔══██╗██║   ██║██║██║     ██║  ██║
;; ██████╔╝╚██████╔╝██║███████╗██████╔╝
;; ╚═════╝  ╚═════╝ ╚═╝╚══════╝╚═════╝ 


;;; Creates a new empty builder.
;;;
;;; Args:
;;;   None.
;;;
;;; Returns:
;;;   builder: A new empty builder instance.
builder begin_cell() asm "NEWC";

;;; Finalizes the builder and returns the resulting cell.
;;;
;;; Args:
;;;   b (builder): The builder to finalize.
;;;
;;; Returns:
;;;   cell: The finalized cell.
cell end_cell(builder b) asm "ENDC";

;;; Returns the number of data bits stored in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to inspect.
;;;
;;; Returns:
;;;   int: Number of data bits stored.
int builder_bits(builder b) asm "BBITS";

;;; Returns the number of cell references stored in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to inspect.
;;;
;;; Returns:
;;;   int: Number of cell references stored.
int builder_refs(builder b) asm "BREFS";

;;; Returns the number of data bits and cell references stored in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to inspect.
;;;
;;; Returns:
;;;   int: Number of data bits stored.
;;;   int: Number of cell references stored.
(int, int) builder_bits_refs(builder b) asm "BBITREFS";

;;; Returns the remaining capacity of the builder in data bits and cell references.
;;;
;;; Args:
;;;   b (builder): The builder to inspect.
;;;
;;; Returns:
;;;   int: Remaining number of data bits that can be stored.
;;;   int: Remaining number of cell references that can be stored.
(int, int) builder_rem_bits_refs(builder b) asm "BREMBITREFS";

;;; Returns the depth of the builder.
;;; If no references have been stored, the depth is 0. Otherwise, it's 1 plus the maximum depth of stored references.
;;;
;;; Args:
;;;   b (builder): The builder to inspect.
;;;
;;; Returns:
;;;   int: The depth of the builder.
int builder_depth(builder b) asm "BDEPTH";

;;; Stores a reference to a cell in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to store the reference into.
;;;   c (cell): The cell to reference.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_ref(builder b, cell c) asm(c b) "STREF";

;;; Stores an optional reference to a cell in the builder.
;;; Stores a 1-bit prefix (0 if null, 1 otherwise) followed by the reference if it's not null.
;;;
;;; Args:
;;;   b (builder): The builder to store the optional reference into.
;;;   c (cell): The cell to reference (can be null).
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_maybe_ref(builder b, cell c) asm(c b) "STOPTREF";

;;; Appends the content (data bits and references) of one builder to another.
;;;
;;; Args:
;;;   to (builder): The destination builder.
;;;   from (builder): The source builder whose content will be appended.
;;;
;;; Returns:
;;;   builder: The modified destination builder.
builder store_builder(builder to, builder from) asm(from to) "STB";

;;; Finalizes the source builder into a cell and stores a reference to it in the destination builder.
;;;
;;; Args:
;;;   to (builder): The destination builder.
;;;   from (builder): The source builder to finalize and reference.
;;;
;;; Returns:
;;;   builder: The modified destination builder.
builder store_builder_as_ref(builder to, builder from) asm(from to) "STBREF";

;;; Stores the data bits and references from a slice in a builder.
;;; Args:
;;;   b (builder): The builder to store the slice content into.
;;;   s (slice): The slice whose content (data and refs) will be appended.
;;;
;;; Returns:
;;;   builder: The modified builder with the slice content appended.
builder store_slice(builder b, slice s) asm(s b) "STSLICE";
(builder, ()) ~store_slice(builder b, slice s) asm(s b) "STSLICE";

;;; Stores a specified number of zero bits into the builder.
;;;
;;; Args:
;;;   b (builder): The builder to store zeros into.
;;;   x (int): The number of zero bits to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_zeroes(builder b, int x) asm "STZEROES";

;;; Stores a specified number of one bits into the builder.
;;;
;;; Args:
;;;   b (builder): The builder to store ones into.
;;;   x (int): The number of one bits to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_ones(builder b, int x) asm "STONES";

;;; Stores an integer using VarUInteger 16 encoding.
;;; The value must be in the range 0..2^120-1.
;;;
;;; Args:
;;;   b (builder): The builder to store the value into.
;;;   x (int): The integer value to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_varuint16(builder b, int x) asm "STVARUINT16";

;;; Stores an integer using VarInteger 16 encoding.
;;; The value must be in the range -2^119..2^119-1.
;;;
;;; Args:
;;;   b (builder): The builder to store the value into.
;;;   x (int): The integer value to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_varint16(builder b, int x) asm "STVARINT16";

;;; Stores an integer using VarUInteger 32 encoding.
;;; The value must be in the range 0..2^248-1.
;;;
;;; Args:
;;;   b (builder): The builder to store the value into.
;;;   x (int): The integer value to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_varuint32(builder b, int x) asm "STVARUINT32";

;;; Stores an integer using VarInteger 32 encoding.
;;; The value must be in the range -2^247..2^247-1.
;;;
;;; Args:
;;;   b (builder): The builder to store the value into.
;;;   x (int): The integer value to store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_varint32(builder b, int x) asm "STVARINT32";

;;; Stores a non-negative integer amount of coins (Grams).
;;; Alias for store_varuint16.
;;;
;;; Args:
;;;   b (builder): The builder to store the value into.
;;;   x (int): The amount of coins (nanograms) to store. Must be non-negative.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_grams(builder b, int x) asm "STGRAMS";
builder store_coins(builder b, int x) asm "STGRAMS";

;;; Stores a single '1' bit, representing boolean true.
;;;
;;; Args:
;;;   b (builder): The builder to store the bit into.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_true(builder b) asm "STONE";

;;; Stores a single '0' bit, representing boolean false.
;;;
;;; Args:
;;;   b (builder): The builder to store the bit into.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_false(builder b) asm "STZERO";

;;; Stores a single bit representing a boolean value (0 for false, -1 for true).
;;;
;;; Args:
;;;   b (builder): The builder to store the bit into.
;;;   x (int): The boolean value to store (0 or -1).
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_bool(builder b, int x) asm(x b) "1 STI";

;;; Stores an integer as a string of its decimal representation (UTF-8 encoded) in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to store the string into.
;;;   x (int): The integer number to convert and store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_number_dec(builder b, int x) asm """
  ZERO                                                        // b x i=0
  SWAP                                                        // b i=0 x
  UNTIL:<{                                                    // b i x
    10 PUSHINT DIVMOD                                         // b i x r
    48 ADDCONST                                               // b i x r
    s3 s1 s3 XCHG3                                            // r b x i
    INC                                                       // r b x i
    s1 s0 XCPU                                                // r b i x x
    ISZERO
  }>
  DROP
  REPEAT:<{ 8 STU }>                                          // ..rrr.. b i
""";

;;; Stores an integer as a string of its hexadecimal representation (UTF-8 encoded, uppercase) in the builder.
;;;
;;; Args:
;;;   b (builder): The builder to store the string into.
;;;   x (int): The integer number to convert and store.
;;;
;;; Returns:
;;;   builder: The modified builder.
builder store_number_hex(builder b, int x) asm """
  ZERO                                                        // b x i=0
  SWAP                                                        // b i=0 x
  UNTIL:<{                                                    // b i x
    16 PUSHINT DIVMOD                                         // b i x r
    48 ADDCONST DUP 57 GTINT IF:<{ 7 ADDCONST }>              // b i x r
    s3 s1 s3 XCHG3                                            // r b x i
    INC                                                       // r b x i
    s1 s0 XCPU                                                // r b i x x
    ISZERO
  }>
  DROP
  REPEAT:<{ 8 STU }>                                          // ..rrr.. b i
""";


;; ██████╗  █████╗ ██████╗ ███████╗███████╗
;; ██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝
;; ██████╔╝███████║██████╔╝███████╗█████╗  
;; ██╔═══╝ ██╔══██║██╔══██╗╚════██║██╔══╝  
;; ██║     ██║  ██║██║  ██║███████║███████╗
;; ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝


;;; Converts a cell into a slice for parsing.
;;; If the cell is exotic, it might be automatically loaded first.
;;;
;;; Args:
;;;   c (cell): The cell to convert.
;;;
;;; Returns:
;;;   slice: The resulting slice representing the cell's content.
slice begin_parse(cell c) asm "CTOS";

;;; Finalizes parsing of a slice. Throws an exception if the slice is not empty (has unread bits or references).
;;;
;;; Args:
;;;   s (slice): The slice to finalize parsing for.
;;;
;;; Returns:
;;;   None
() end_parse(slice s) impure asm "ENDS";

;;; Converts an exotic cell into a slice for parsing and returns its type.
;;; Does not automatically load the cell.
;;;
;;; Args:
;;;   c (cell): The exotic cell to convert.
;;;
;;; Returns:
;;;   slice: The resulting slice representing the cell's content.
;;;   int: The type of the exotic cell.
(slice, int) begin_parse_exotic(cell c) asm "XCTOS";

;;; Returns the number of data bits in the slice.
;;;
;;; Args:
;;;   s (slice): The slice to inspect.
;;;
;;; Returns:
;;;   int: Number of data bits.
int slice_bits(slice s) asm "SBITS";

;;; Returns the number of references in the slice.
;;;
;;; Args:
;;;   s (slice): The slice to inspect.
;;;
;;; Returns:
;;;   int: Number of references.
int slice_refs(slice s) asm "SREFS";

;;; Returns the number of data bits and references in the slice.
;;;
;;; Args:
;;;   s (slice): The slice to inspect.
;;;
;;; Returns:
;;;   int: Number of data bits.
;;;   int: Number of references.
(int, int) slice_bits_refs(slice s) asm "SBITREFS";

;;; Checks if the slice is empty (contains no data bits and no references).
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;
;;; Returns:
;;;   int: -1 if the slice is empty, 0 otherwise.
int slice_empty?(slice s) asm "SEMPTY";

;;; Checks if the slice's data part is empty (contains no data bits).
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;
;;; Returns:
;;;   int: -1 if the data part is empty, 0 otherwise.
int slice_data_empty?(slice s) asm "SDEMPTY";

;;; Checks if the slice's reference part is empty (contains no references).
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;
;;; Returns:
;;;   int: -1 if the reference part is empty, 0 otherwise.
int slice_refs_empty?(slice s) asm "SREMPTY";

;;; Returns the depth of the slice.
;;; If the slice has no references, depth is 0. Otherwise, it's 1 plus the maximum depth of referenced cells.
;;;
;;; Args:
;;;   s (slice): The slice to inspect.
;;;
;;; Returns:
;;;   int: The depth of the slice.
int slice_depth(slice s) asm "SDEPTH";

;;; Checks if the data parts of two slices are equal.
;;;
;;; Args:
;;;   a (slice): The first slice.
;;;   b (slice): The second slice.
;;;
;;; Returns:
;;;   int: -1 if the data parts are equal, 0 otherwise.
int equal_slice_bits(slice a, slice b) asm "SDEQ";

;;; Loads the first cell reference from the slice.
;;;
;;; Args:
;;;   s (slice): The slice to load the reference from.
;;;
;;; Returns:
;;;   slice: The remaining part of the slice after loading the reference.
;;;   cell: The loaded cell reference.
(slice, cell) load_ref(slice s) asm(-> 1 0) "LDREF";

;;; Preloads the first cell reference from the slice without modifying the slice.
;;;
;;; Args:
;;;   s (slice): The slice to preload the reference from.
;;;
;;; Returns:
;;;   cell: The preloaded cell reference.
cell preload_ref(slice s) asm "PLDREF";

;;; Loads and discards the first cell reference from the slice.
;;;
;;; Args:
;;;   s (slice): The slice to load and discard the reference from.
;;;
;;; Returns:
;;;   slice: The remaining part of the slice.
(slice, ()) ~skip_ref(slice s) asm "LDREF NIP";

;;; Loads the first cell reference from the slice and converts it to a slice for parsing.
;;;
;;; Args:
;;;   s (slice): The slice to load the reference from.
;;;
;;; Returns:
;;;   slice: The remaining part of the original slice after loading the reference.
;;;   slice: The slice representation of the loaded cell reference.
(slice, slice) load_ref_and_parse(slice s) asm "LDREFRTOS";

;;; Loads an integer stored using VarUInteger 16 encoding.
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded integer value.
(slice, int) load_varuint16(slice s) asm(-> 1 0) "LDVARUINT16";

;;; Loads an integer stored using VarInteger 16 encoding.
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded integer value.
(slice, int) load_varint16(slice s) asm(-> 1 0) "LDVARINT16";

;;; Loads an integer stored using VarUInteger 32 encoding.
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded integer value.
(slice, int) load_varuint32(slice s) asm(-> 1 0) "LDVARUINT32";

;;; Loads an integer stored using VarInteger 32 encoding.
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded integer value.
(slice, int) load_varint32(slice s) asm(-> 1 0) "LDVARINT32";

;;; Loads a non-negative integer amount of coins (Grams).
;;; Alias for load_varuint16.
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded amount of coins (nanograms).
(slice, int) load_grams(slice s) asm( -> 1 0) "LDGRAMS";
(slice, int) load_coins(slice s) asm( -> 1 0) "LDGRAMS";

;;; Loads and discards an amount of coins (Grams) from the slice.
;;;
;;; Args:
;;;   s (slice): The slice to load and discard the coins from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
(slice, ()) ~skip_grams(slice s) asm "LDGRAMS NIP";
(slice, ()) ~skip_coins(slice s) asm "LDGRAMS NIP";

;;; Loads a sequence of leading zero bits and returns their count.
;;;
;;; Args:
;;;   src (slice): The slice to load zeros from.
;;;
;;; Returns:
;;;   slice: The remaining slice after the zero bits.
;;;   int: The number of leading zero bits loaded.
(slice, int) load_zeroes(slice src) asm (-> 1 0) "LDZEROES";

;;; Loads a sequence of leading one bits and returns their count.
;;;
;;; Args:
;;;   src (slice): The slice to load ones from.
;;;
;;; Returns:
;;;   slice: The remaining slice after the one bits.
;;;   int: The number of leading one bits loaded.
(slice, int) load_ones(slice src) asm (-> 1 0) "LDONES";

;;; Returns a new slice containing all but the first `len` data bits of the original slice.
;;; Does not affect references.
;;;
;;; Args:
;;;   s (slice): The original slice.
;;;   len (int): The number of data bits to skip from the beginning.
;;;
;;; Returns:
;;;   slice: The resulting/modified slice after skipping the bits.
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, ()) ~skip_bits(slice s, int len) asm "SDSKIPFIRST";

;;; Returns a new slice containing all but the last `len` data bits of the original slice.
;;; Does not affect references.
;;;
;;; Args:
;;;   s (slice): The original slice.
;;;   len (int): The number of data bits to skip from the end.
;;;
;;; Returns:
;;;   slice: The resulting/modified slice after skipping the bits.
slice skip_last_bits(slice s, int len) asm "SDSKIPLAST";
(slice, ()) ~skip_last_bits(slice s, int len) asm "SDSKIPLAST";

;;; Returns a new slice containing only the first `len` data bits of the original slice.
;;; Does not affect references.
;;;
;;; Args:
;;;   s (slice): The original slice.
;;;   len (int): The number of data bits to keep from the beginning.
;;;
;;; Returns:
;;;   slice: The resulting slice containing only the first bits.
slice slice_first(slice s, int len) asm "SDCUTFIRST";

;;; Returns a new slice containing only the last `len` data bits of the original slice.
;;; Does not affect references.
;;;
;;; Args:
;;;   s (slice): The original slice.
;;;   len (int): The number of data bits to keep from the end.
;;;
;;; Returns:
;;;   slice: The resulting slice containing only the last bits.
slice slice_last(slice s, int len) asm "SDCUTLAST";

;;; Loads an optional cell reference from the slice.
;;; Loads a 1-bit prefix: if 0, returns null; if 1, loads and returns the reference.
;;;
;;; Args:
;;;   s (slice): The slice to load the optional reference from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   cell: The loaded cell reference (or null).
(slice, cell) load_maybe_ref(slice s) asm( -> 1 0) "LDOPTREF";

;;; Preloads an optional cell reference from the slice without modifying the slice.
;;; Reads a 1-bit prefix: if 0, returns null; if 1, preloads and returns the reference.
;;;
;;; Args:
;;;   s (slice): The slice to preload the optional reference from.
;;;
;;; Returns:
;;;   cell: The preloaded cell reference (or null).
cell preload_maybe_ref(slice s) asm "PLDOPTREF";

;;; Skips an optional cell reference in the slice.
;;; Loads a 1-bit prefix and skips the reference if the prefix is 1.
;;;
;;; Args:
;;;   s (slice): The slice to skip the optional reference in.
;;;
;;; Returns:
;;;   slice: The remaining slice.
(slice, ()) ~skip_maybe_ref(slice s) asm "SKIPOPTREF";

;;; Loads a single bit and interprets it as a boolean value (-1 for true, 0 for false).
;;;
;;; Args:
;;;   s (slice): The slice to load from.
;;;
;;; Returns:
;;;   slice: The remaining slice.
;;;   int: The loaded boolean value (0 or -1).
(slice, int) load_bool(slice s) asm(-> 1 0) "1 LDI";

;;; Group for preloading indexed references.
;;; Preloads the N-th cell reference from the slice without modifying the slice.
;;;
;;; Args:
;;;   s (slice): The slice to preload the reference from.
;;;
;;; Returns:
;;;   cell: The preloaded cell reference.
cell preload_first_ref(slice s) asm "0 PLDREFIDX";
cell preload_second_ref(slice s) asm "1 PLDREFIDX";
cell preload_third_ref(slice s) asm "2 PLDREFIDX";
cell preload_fourth_ref(slice s) asm "3 PLDREFIDX";

;;; Checks if the data part of slice `s` starts with the data part of slice `pfx`.
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;   pfx (slice): The prefix slice to check against.
;;;
;;; Returns:
;;;   int: -1 if `s` starts with `pfx`, 0 otherwise.
int slice_check_prefix(slice s, slice pfx) asm "SDPFXREV";

;;; Checks if the data part of slice `s` ends with the data part of slice `sfx`.
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;   sfx (slice): The suffix slice to check against.
;;;
;;; Returns:
;;;   int: -1 if `s` ends with `sfx`, 0 otherwise.
int slice_check_suffix(slice s, slice sfx) asm "SDSFXREV";

;;; Checks if the slice contains at least `l` data bits. Quiet version.
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;   l (int): The minimum number of data bits required.
;;;
;;; Returns:
;;;   int: -1 if the check passes, 0 otherwise.
int slice_check_bits(slice s, int l) asm "SCHKBITSQ";

;;; Checks if the slice contains at least `r` references. Quiet version.
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;   r (int): The minimum number of references required.
;;;
;;; Returns:
;;;   int: -1 if the check passes, 0 otherwise.
int slice_check_refs(slice s, int r) asm "SCHKREFSQ";

;;; Checks if the slice contains at least `l` data bits and `r` references. Quiet version.
;;;
;;; Args:
;;;   s (slice): The slice to check.
;;;   l (int): The minimum number of data bits required.
;;;   r (int): The minimum number of references required.
;;;
;;; Returns:
;;;   int: -1 if the check passes, 0 otherwise.
int slice_check_bits_refs(slice s, int l, int r) asm "SCHKBITREFSQ";

;;; Splits the slice into two parts: the first part contains the first `bits` data bits and `refs` references,
;;; and the second part contains the remainder.
;;;
;;; Args:
;;;   cs (slice): The slice to split.
;;;   bits (int): The number of data bits for the first part (0-1023).
;;;   refs (int): The number of references for the first part (0-4).
;;;
;;; Returns:
;;;   slice: The first part of the split slice.
;;;   slice: The remaining part of the slice.
(slice, slice) slice_split(slice cs, int bits, int refs) asm(-> 1 0) "SPLIT";


;; ███████╗██╗███████╗███████╗
;; ██╔════╝██║╚══███╔╝██╔════╝
;; ███████╗██║  ███╔╝ █████╗  
;; ╚════██║██║ ███╔╝  ██╔══╝  
;; ███████║██║███████╗███████╗
;; ╚══════╝╚═╝╚══════╝╚══════╝


;;; Computes the count of distinct cells, data bits, and cell references
;;; in the DAG rooted at a cell, up to a maximum cell count limit.
;;; Returns (null, null, null, 0) on failure (e.g., limit exceeded or error) or if the cell is null.
;;;
;;; Args:
;;;   c (cell): The root cell of the DAG (can be null).
;;;   max_cells (int): The maximum number of distinct cells to count.
;;;
;;; Returns:
;;;   int: Count of distinct cells (or null on failure).
;;;   int: Total number of data bits in distinct cells (or null on failure).
;;;   int: Total number of references in distinct cells (or null on failure).
;;;   int: Flag indicating success (-1) or failure (0).
(int, int, int, int) compute_data_size?(cell c, int max_cells) asm "CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT";

;;; Computes the count of distinct cells, data bits, and cell references
;;; in the DAG reachable from a slice, up to a maximum cell count limit.
;;; Does not count the cell containing the slice itself, but includes its bits and refs.
;;; Returns (null, null, null, 0) on failure (e.g., limit exceeded or error).
;;;
;;; Args:
;;;   s (slice): The slice whose reachable DAG size is to be computed.
;;;   max_cells (int): The maximum number of distinct cells to count (excluding the slice's parent cell).
;;;
;;; Returns:
;;;   int: Count of distinct cells excluding the slice's parent (or null on failure).
;;;   int: Total data bits in the slice and reachable distinct cells (or null on failure).
;;;   int: Total references in the slice and reachable distinct cells (or null on failure).
;;;   int: Flag indicating success (-1) or failure (0).
(int, int, int, int) slice_compute_data_size?(slice s, int max_cells) asm "SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT"; ;; Note: corrected argument 'c' to 's' based on opcode name

;;; Computes the count of distinct cells, data bits, and cell references
;;; in the DAG rooted at a cell, up to a maximum cell count limit.
;;; Throws a cell overflow exception (8) on failure (e.g., limit exceeded).
;;;
;;; Args:
;;;   c (cell): The root cell of the DAG (cannot be null).
;;;   max_cells (int): The maximum number of distinct cells to count.
;;;
;;; Returns:
;;;   int: Count of distinct cells.
;;;   int: Total number of data bits in distinct cells.
;;;   int: Total number of references in distinct cells.
(int, int, int) compute_data_size(cell c, int max_cells) impure asm "CDATASIZE";

;;; Computes the count of distinct cells, data bits, and cell references
;;; in the DAG reachable from a slice, up to a maximum cell count limit.
;;; Does not count the cell containing the slice itself, but includes its bits and refs.
;;; Throws a cell overflow exception (8) on failure (e.g., limit exceeded).
;;;
;;; Args:
;;;   s (slice): The slice whose reachable DAG size is to be computed.
;;;   max_cells (int): The maximum number of distinct cells to count (excluding the slice's parent cell).
;;;
;;; Returns:
;;;   int: Count of distinct cells excluding the slice's parent.
;;;   int: Total data bits in the slice and reachable distinct cells.
;;;   int: Total references in the slice and reachable distinct cells.
(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm "SDATASIZE";


;;  ██████╗███████╗██╗     ██╗     
;; ██╔════╝██╔════╝██║     ██║     
;; ██║     █████╗  ██║     ██║     
;; ██║     ██╔══╝  ██║     ██║     
;; ╚██████╗███████╗███████╗███████╗
;;  ╚═════╝╚══════╝╚══════╝╚══════╝


;;; Returns the depth of the cell.
;;; If the cell has no references, depth is 0. Otherwise, it's 1 plus the maximum depth of referenced cells.
;;; Returns 0 if the input is null.
;;;
;;; Args:
;;;   c (cell): The cell to inspect (can be null).
;;;
;;; Returns:
;;;   int: The depth of the cell.
int cell_depth(cell c) asm "CDEPTH";

;;; Checks if the provided value is null.
;;;
;;; Args:
;;;   c (cell): The value to check.
;;;
;;; Returns:
;;;   int: -1 if the value is null, 0 otherwise.
int cell_null?(cell c) asm "ISNULL";

;;; Returns the level of the cell.
;;; Returns 0 if the cell is null.
;;;
;;; Args:
;;;   c (cell): The cell to inspect (can be null).
;;;
;;; Returns:
;;;   int: The level of the cell (0-3).
int cell_level(cell c) asm "CLEVEL";

;;; Returns the level mask of the cell.
;;; Returns 0 if the cell is null.
;;;
;;; Args:
;;;   c (cell): The cell to inspect (can be null).
;;;
;;; Returns:
;;;   int: The level mask of the cell.
int cell_level_mask(cell c) asm "CLEVELMASK";
